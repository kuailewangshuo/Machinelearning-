{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assignment 3\n",
    "\n",
    "In the third assignment you will cluster hand-written digits using k-means. This is an unsupervised method and will therefore differ a bit from the previous assignments. \n",
    "You will also have to analyse the behavior of K-means for different parameter settings and initializations.\n",
    "\n",
    "The assignment follows Andrew Ng's explanation of K-means and (re)watching his videos could be useful.\n",
    "\n",
    "Publish your notebook (ipynb file) to your repository on Github. If you have any questions, please email Gosia and Rein and don't forget to commit the most recent version of you assignment on Github so that we can see your code.\n",
    "\n",
    "Note: all code should be clear, add comments where necessary (especially if your code is not straightforward). You are free to discuss the assignment among each other, but stick to sharing ideas, not code.\n",
    "\n",
    "### Deadline: December 1, 23:59\n",
    "\n",
    "Do not hand in any other files, the Notebook should contain all your answers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    }
   ],
   "source": [
    "%pylab inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The dataset is the same as with logistic regression. However, you don't need to use the class labels as K-means is an unsupervised method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The numbers shown are: \n",
      "[[0 1 2 3 4]\n",
      " [5 6 7 8 9]]\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAfkAAADiCAYAAABN0L4IAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAAPYQAAD2EBqD+naQAAIABJREFUeJzsfWt34krTa0EggVxm9vv/f+QzOxcSEgjnwz5yZKHqNgSM\nw1BredlAAna7u1RSVbdHm80mLnaxi13sYhe72PnZ+NQncLGLXexiF7vYxY5jF5C/2MUudrGLXexM\n7QLyF7vYxS52sYudqV1A/mIXu9jFLnaxM7ULyF/sYhe72MUudqZ2AfmLXexiF7vYxc7ULiB/sYtd\n7GIXu9iZ2gXkL3axi13sYhc7U7uA/MUudrGLXexiZ2qTU/74aDT69nJ7o9Eobm5u4vr6Om5ubtIN\nn8/n87i7u+u8fX5+xvv7e3x8fHTav7y8dN6Wy2VsNpvYbDbx+fnZ2rvjn2qTyST++eef+L//+79O\n+9lsFqPRKMbjcYxGo/QY+8Vi0bnNF4tFLJfLWC6X8f7+3hy77f39Pdbr9ambb2+7vr6O6XTaaT+f\nz+P379/x+/fv+Oeff+L379/x69evrfewjUajWK1Wre3j42PrPbz/v//9L/78+dNp//r6euqma2w6\nncZ8Po/b29u4vb21x/ze3d1ds69t8/k81ut1s31+fhZfLxaLzm3458+f5jsyf6Lv/VTr4iP4+Nev\nX/Hr1694eHhojrPXk8kk/vz5E4+Pj/Hvv/82258/f1qvsX18fPR+/ZvNZlT6/MLkL3axi13sYhc7\nU7uA/MUudrGLXexiZ2oXkL/YxS52sYtd7EztAvIXu9jFLnaxi52pnbTw7pA2Ho+b7erqKq6urmIy\nmcRkMmmKi3ibTqfNhr/D/+F7SkUcbouI5u/w+/jt1Wq1VQgzmUzi8/Oz8xYRrQKZLsdDNJyf22Mb\njUbNXtsWez3ONtxX3fhvsvs5RHPnpu+NRqOtMYC+iEJU3lBANpvNtsbIZDJptVPpvHbZsms5tulv\n817fm06ntr1cAeN0Om31LXwHCtzW63VTiPj+/h6j0ajTmHf9vUu/53H1+fkZ4/G49Z08zn66OV+d\n+Qj19don0V64Z+6+sK8aup0FyGfAen19HbPZLGazWePAtDqWq+8xWLkTjEajWK/XcXV1Fev1uvkd\nHGvHurq6an4fnQGf8bnNZrOmeru0IThYr9etjqWdzL0emrlAJLsmtFtEVB2aAhlv19fX8fHx0Qq2\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x3f53930>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.datasets import load_digits\n",
    "\n",
    "digits = load_digits(n_class=10)\n",
    "\n",
    "#Create two rows with numbers\n",
    "firstrow = np.hstack(digits.images[:5,:,:])\n",
    "secondrow = np.hstack(digits.images[5:10,:,:])\n",
    "\n",
    "plt.gray()\n",
    "plt.axis('off')\n",
    "\n",
    "#Show both rows at the same time\n",
    "plt.imshow(np.vstack((firstrow,secondrow)))\n",
    "\n",
    "#Show both rows at the same time using nearest-neighbor interpolation (pixelated image)\n",
    "#plt.imshow(np.vstack((firstrow,secondrow)),  interpolation=\"nearest\")\n",
    "\n",
    "print \"The numbers shown are: \\n\", np.vstack((digits.target[:5], digits.target[5:10]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualize functions\n",
    "\n",
    "In order to make it more visible what K-means is learning, we provide two visualization functions. The first function takes the assignment of each digit to each cluster and shows what the digits of the cluster look like. If your algorithm works well then the digits should look alike!\n",
    "\n",
    "The second function visualizes the actual cluster centroids. It is expected that you see something that resembles the original digit, but don't be surprised if one of the results is a combination, e.g. a zero and eight at the same time.\n",
    "\n",
    "K-means is a very simple algorithm and is not likely to get an optimal result, therefore some of the centroids will be just noise. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#With below code you can visualize the data clusters\n",
    "#The input is a vector c (with all the datapoints assigned to a cluster)\n",
    "#this function will show a bunch of numbers assigned to that cluster.\n",
    "#It will skip the cluster if there are not enough images in it.\n",
    "\n",
    "#You can use this code after you have finished implementing everything!\n",
    "def visualize(best_c):\n",
    "    for i in range(10):\n",
    "        print \"There are \", np.sum(c == i), \" elements in cluster \", i\n",
    "    \n",
    "    for cluster in range(10):\n",
    "        #Create two rows with numbers\n",
    "        filtered = digits.images[c == cluster,:,:]\n",
    "\n",
    "        if filtered.shape[0] < 5:\n",
    "            print \"not enough items in cluster \", cluster\n",
    "            continue\n",
    "\n",
    "        rows = np.floor(filtered.shape[0]/10)\n",
    "        image_rows = []\n",
    "\n",
    "        for i in range(min(5,int(rows))):\n",
    "            image_row = np.hstack(filtered[i*10:(i+1)*10,:,:])\n",
    "            image_rows.append(image_row)\n",
    "\n",
    "        plt.gray()\n",
    "        plt.axis('off')\n",
    "\n",
    "        #Show both rows at the same time\n",
    "        plt.imshow(np.vstack(image_rows))\n",
    "        plt.show()\n",
    "\n",
    "        print \"The cluster shown above is: \", cluster"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# This function visualizes the centroids. \n",
    "# It takes as input the matrix mu with the cluster centroids and shows an image.\n",
    "\n",
    "#You can use this code after you have finished implementing everything!\n",
    "def visualize_centroids(best_mu):\n",
    "    mu = best_mu.T.reshape(10,8,8)\n",
    "    \n",
    "    #Create two rows with numbers\n",
    "    firstrow = np.hstack(mu[:5,:,:])\n",
    "    secondrow = np.hstack(mu[5:,:,:])\n",
    "\n",
    "    plt.gray()\n",
    "    plt.axis('off')\n",
    "\n",
    "    #Show both rows at the same time\n",
    "    plt.imshow(np.vstack((firstrow,secondrow)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The implementation\n",
    "\n",
    "You have to implement the next three functions and fill in the body of the loop in order to create a correct implementation of k-means. Please follow Andrew Ng's description and the instructions that come with the functions closely. \n",
    "\n",
    "Think about the problem one step at a time. First focus on implementing the functions and only then start thinking about how they all come together. The skeleton code will guide you to make sure that it will come together. \n",
    "\n",
    "Grading:\n",
    "- Working version of compute_centroid, update_centroid and cost_function (0.5 point each)\n",
    "- A working triple loop that successfully learns and stores the best result (3 points)\n",
    "- Correct use of both visualization functions on your best result and an explanation how you got to the best result and why it is necessary to have many initializations (1.5 points)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#First write a function that takes as input 1 image x and the cluster centroids mu. \n",
    "#It returns a number that is the closest centroid (index of the closest centroid)\n",
    "def compute_centroid(x,mu):\n",
    "    #mu will be of size 64 by k\n",
    "    #x will be of size 64 (need to reshape to 64 by 1!)\n",
    "    #You can subtract x from mu, and numpy will \"broadcast\" over the columns, result is 64 by k\n",
    "    #Then you can take the norm over the columns (give option axis = 0)\n",
    "    #return the index of the closest\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Second write a function that takes as input:\n",
    "#a cluster number\n",
    "#the cluster centroids\n",
    "#all the datapoints assigned to that cluster\n",
    "#It returns an updated mu matrix for that cluster number\n",
    "def update_centroid(centroid, mu, X_c):\n",
    "    #you have to average over the columns in X_c and change only 1 specific column in mu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Now write the cost function. This will be exactly the same as the compute_centroid\n",
    "#However it will return the actual minimum and not the index of the centroid\n",
    "def cost_function(x,mu):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "##Now you are going to link it all together again\n",
    "\n",
    "#The amount of iterations\n",
    "initialisation_iterations = \n",
    "iterations = \n",
    "\n",
    "#define the amount of clusters k\n",
    "k = 10\n",
    "\n",
    "x = np.reshape(digits.images[:1500],(1500,64))\n",
    "x_test = np.reshape(digits.images[1500:],(297,64))\n",
    "\n",
    "#This time the code constists of three layers of loops:\n",
    "#The first loop is for different initialisations of mu\n",
    "#The second loop is for the amount of iterations of the k means algorithm\n",
    "#The third loop actually consists of two loops:\n",
    "    #Loop 1 updates the centroid of all the clusters\n",
    "    #Loop 2 assigns a new cluster to each datapoint\n",
    "\n",
    "for h in range(initialisation_iterations):\n",
    "    #mu is the centroid matrix, initialized by sampling from a uniform distribution (shape is 64 by k!)\n",
    "    mu = np.random.uniform(0,16,(64,k))\n",
    "    \n",
    "    #c is the vector that assigns each digit to a centroid\n",
    "    #initialized with integers between 0 and 16, the shape is 1500 by nothing\n",
    "    c = np.random.randint(0,k,(1500))\n",
    "\n",
    "    for j in range(iterations):\n",
    "        for i in range(k):\n",
    " \n",
    "        for i in range(x.shape[0]):"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bonus\n",
    "\n",
    "There is a special \"trick\" you can do to make sure all clusters are used. You can do this by initializing the cluster centroids as the first ten digits. Luckily, the dataset x has as first 10 elements the first 10 digits.\n",
    "\n",
    "Take the code with the three loops, remove the outer loop since you already know the \"best\" initialization and use the below line of code to initialize mu.\n",
    "\n",
    "To show:\n",
    "- Visualize the resulting centroids (Do they still resemble the digits?)\n",
    "- Plot the cost over iterations and compare this to the original initialization\n",
    "\n",
    "Max 0.5 points extra, your final amount of points cannot be more than 6.\n",
    "\n",
    "Note: only attempt this if you're confident you got everything working."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#You should initialize mu as:\n",
    "mu = x[:10,:].T"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
